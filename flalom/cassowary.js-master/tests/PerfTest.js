// Copyright (C) 1998-2000 Greg J. Badros
// Use of this source code is governed by http://www.apache.org/licenses/LICENSE-2.0
//
// Parts Copyright (C) 2012, Alex Russell (slightlyoff@chromium.org)

(function(c){
"use strict";

var random = (function() {
  var _rand = [
    0.1744752551894635, 0.3014782755635679, 0.7715001606848091,
    0.6968680871650577, 0.743455009534955, 0.36365815764293075,
    0.1373446669895202, 0.7948962098453194, 0.08806556276977062,
    0.3140941644087434, 0.33473821729421616, 0.6464335317723453,
    0.44537449697963893, 0.3627538967411965, 0.6036278933752328,
    0.09391953237354755, 0.32912142132408917, 0.9778599387500435,
    0.9189176764339209, 0.47457095119170845, 0.9568617101758718,
    0.6184558228123933, 0.2763595338910818, 0.9512466662563384,
    0.956017543328926, 0.4160552460234612, 0.07742152106948197,
    0.6623697143513709, 0.4862027948256582, 0.34909118991345167,
    0.4023130242712796, 0.20974621316418052, 0.5460258959792554,
    0.4912258281838149, 0.049703272292390466, 0.2662620018236339,
    0.3904872646089643, 0.16129917209036648, 0.27700238791294396,
    0.5343675769399852, 0.48855532659217715, 0.25227431673556566,
    0.6712200806941837, 0.4420205077622086, 0.15652445727027953,
    0.019505679607391357, 0.3805328314192593, 0.3146708691492677,
    0.01159586664289236, 0.715046807192266, 0.3233870242256671,
    0.38375549763441086, 0.23123639379628003, 0.40365807875059545,
    0.34581487136892974, 0.004674643045291305, 0.41652141767553985,
    0.05601333826780319, 0.3996818179730326, 0.24878791812807322,
    0.7093691881746054, 0.25755319162271917, 0.46560192201286554,
    0.8240272104740143, 0.45432053739205003, 0.9311478401068598,
    0.7946284411009401, 0.2905675396323204, 0.3216528950724751,
    0.4912065891548991, 0.7083176267333329, 0.14018931332975626,
    0.49736824654974043, 0.4732196293771267, 0.02398784807883203,
    0.4430398044642061, 0.6572482499759644, 0.9033272862434387,
    0.48834104440174997, 0.35458415164612234, 0.44484385335817933,
    0.650646231835708, 0.17310335487127304, 0.15919613186269999,
    0.13417132175527513, 0.7030221610330045, 0.2887686227913946,
    0.6586049345787615, 0.9461675814818591, 0.4978211186826229,
    0.8920063683763146, 0.6235801409929991, 0.6642662233207375,
    0.21263846661895514, 0.5956081496551633, 0.3907312888186425,
    0.6290960921905935, 0.5532340724021196, 0.21300211758352816,
    0.25641931500285864, 0.4154056853149086, 0.7720533674582839,
    0.47031038999557495, 0.12244524620473385, 0.4137370518874377,
    0.06407944299280643, 0.8967204014770687, 0.6591999386437237,
    0.38255601725541055, 0.5933674164116383, 0.45099552953615785,
    0.08323158882558346, 0.8310488504357636, 0.6066792889032513,
    0.8771526149939746, 0.46499172947369516, 0.8438380020670593,
    0.36752068460918963, 0.7077672106679529, 0.06804291205480695,
    0.472909327596426, 0.3278144015930593, 0.8230288738850504,
    0.2301469761878252, 0.45082543534226716, 0.9148922546301037,
    0.8462372324429452, 0.5471333549357951, 0.744010001886636,
    0.32478021644055843, 0.4123113239184022, 0.29290951089933515,
    0.41764246649108827, 0.49051293497905135, 0.18801226932555437,
    0.5254587235394865, 0.0998553519602865, 0.7991233891807497,
    0.3118169920053333, 0.9882380054332316, 0.6285413962323219,
    0.34384542773477733, 0.1919464513193816, 0.42111369757913053,
    0.03420150000602007, 0.9616761547513306, 0.23151797917671502,
    0.48391719767823815, 0.40539228869602084, 0.6482129825744778,
    0.3535855619702488, 0.13749119825661182, 0.30150240822695196,
    0.31884431024082005, 0.10846611578017473, 0.9688477111048996,
    0.2784780377987772, 0.7226613834500313, 0.17530082142911851,
    0.32992040645331144, 0.43903873837552965, 0.4591269167140126,
    0.6533141303807497, 0.9712547578383237, 0.8780149547383189,
    0.07410558126866817, 0.2087190083693713, 0.8121745898388326,
    0.7365643319208175, 0.3326354769524187, 0.8470473093912005,
    0.14959376282058656, 0.5464028606656939, 0.44503902830183506,
    0.32883754465729, 0.7781145195476711, 0.4352134617511183,
    0.8308798531070352, 0.9534003136213869, 0.6497663662303239,
    0.4219457602594048, 0.21833852562122047, 0.8081524141598493,
    0.40857507288455963, 0.01281007006764412, 0.04714799555949867,
    0.42517229239456356, 0.2288101555313915, 0.08222558721899986,
    0.3667214869055897, 0.996577623533085, 0.36687074112705886,
    0.43843955686315894, 0.4568363414146006, 0.8295704452320933,
    0.6649382188916206, 0.5383221122901887, 0.8120970609597862,
    0.9474012472201139, 0.7364623604808003, 0.41856804536655545,
    0.6224440606310964, 0.8992961258627474, 0.9361167696770281,
    0.8152648187242448, 0.5406198645941913, 0.5509838196448982,
    0.3171566524542868, 0.5074082927312702, 0.8180019336286932,
    0.3305541374720633, 0.3891986741218716, 0.45900366734713316,
    0.5159398366231471, 0.7200842371676117, 0.12028013891540468,
    0.8903808644972742, 0.9629790249746293, 0.03293784172274172,
    0.8532234481535852, 0.7237117139156908, 0.574399731354788,
    0.5818298123776913, 0.8234145848546177, 0.33378337789326906,
    0.22253877040930092, 0.4601420487742871, 0.9953252349514514,
    0.2346187592484057, 0.06433911784552038, 0.5867915702983737,
    0.18918067845515907, 0.09791926201432943, 0.21872174157761037,
    0.6884096823632717, 0.1990945825818926, 0.29566740244627,
    0.49285055114887655, 0.8140420929994434, 0.11112620797939599,
    0.7465117927640676, 0.07283622887916863, 0.03440126683562994,
    0.4892840930260718, 0.49642582377418876, 0.1128215801436454,
    0.4831562163308263, 0.7099296867381781, 0.33259943616576493,
    0.6390695637091994, 0.7933271920774132, 0.5091039778199047,
    0.6339505738578737, 0.2667833308223635, 0.8541822982951999,
    0.35482529108412564, 0.7292157192714512, 0.8120138254016638,
    0.7436967678368092, 0.34298664913512766, 0.33109658141620457,
    0.01558143855072558, 0.7714801719412208, 0.05950789572671056,
    0.34930460224859416, 0.8522334883455187, 0.8180755572393537,
    0.7751417870167643, 0.20098059298470616, 0.6050911000929773,
    0.8159167796839029, 0.15892442944459617, 0.1779206159990281,
    0.13044612226076424, 0.19736850634217262, 0.4292462121229619,
    0.6488339365459979, 0.9887185799889266, 0.021942029241472483,
    0.9072316533420235, 0.7570900584105402, 0.3772190527524799,
    0.22668542433530092, 0.21149072865955532, 0.5618078671395779,
    0.7955686128698289, 0.5954113851767033, 0.8390764177311212,
    0.4108365022111684, 0.28736450406722724, 0.9253407255746424,
    0.7950082293245941, 0.7365727119613439, 0.45737593388184905,
    0.671527981525287, 0.8864568874705583, 0.18012250564061105,
    0.48392190784215927, 0.6698827035725117, 0.780878038611263,
    0.09649605792947114, 0.28132985648699105, 0.7022838145494461,
    0.667430100729689, 0.8344685663469136, 0.305213182233274,
    0.26737258210778236, 0.6366555218119174, 0.442138982238248,
    0.3774632450658828, 0.388917586999014, 0.7675990115385503,
    0.6271570222452283, 0.03462024196051061, 0.5473742773756385,
    0.9788957124110311, 0.26039629988372326, 0.4019907144829631,
    0.6501345101278275, 0.9616871394682676, 0.05457936110906303,
    0.34224130120128393, 0.7554090295452625, 0.5490712029859424,
    0.9064220548607409, 0.009368656435981393, 0.1717615695670247,
    0.4438973793294281, 0.31258263159543276, 0.8303834083490074,
    0.6812110824976116, 0.7647745397407562, 0.3969361826311797,
    0.2794910112861544, 0.04836750100366771, 0.6707216277718544,
    0.9947476366069168, 0.9927701884880662, 0.7051339887548238,
    0.7610765781719238, 0.09389070514589548, 0.815383872250095,
    0.2575671346858144, 0.4951535831205547, 0.9058356061577797,
    0.2372384222690016, 0.717080692993477, 0.08353226725012064,
    0.48171247262507677, 0.21349888178519905, 0.15882964548654854,
    0.337014191551134, 0.1478994321078062, 0.4547458072192967,
    0.47726170369423926, 0.926901439903304, 0.2879942648578435,
    0.5010180696845055, 0.9826687960885465, 0.3957964237779379,
    0.5731030975002795, 0.179749202914536, 0.7047781988512725,
    0.3662236996460706, 0.968968604458496, 0.9743871733080596,
    0.7237458024173975, 0.9289777965750545, 0.2767562549561262,
    0.2872323284391314, 0.6573779361788183, 0.09047301951795816,
    0.329924758290872, 0.475741783156991, 0.6535003834869713,
    0.2621965310536325, 0.2124721088912338, 0.416430464014411,
    0.4410010704305023, 0.4042799202725291, 0.008107981877401471,
    0.1341368560679257, 0.8639312079176307, 0.48627837747335434,
    0.7172187473624945, 0.78043406852521, 0.9247325896285474,
    0.779534098925069, 0.5319880961906165, 0.13214176101610065,
    0.7629019473679364, 0.39299104805104434, 0.2846221597865224,
    0.7120097288861871, 0.5579547132365406, 0.6715184964705259,
    0.7101130622904748, 0.8028580031823367, 0.7938225497491658,
    0.47713344916701317, 0.7643798764329404, 0.5351010016165674,
    0.007986767683178186, 0.9740756782703102, 0.6116524424869567,
    0.7323435668367893, 0.04251244571059942, 0.007450592936947942,
    0.07790348236449063, 0.3978446461260319, 0.7936626528389752,
    0.6869880310259759, 0.4287817601580173, 0.14180626720190048,
    0.2296293976251036, 0.7808834561146796, 0.8746779416687787,
    0.9585953252390027, 0.8593759692739695, 0.5032301677856594,
    0.5714536637533456, 0.09358780388720334, 0.18602965935133398,
    0.16768372640945017, 0.04718164447695017, 0.1701131807640195,
    0.5676097732502967, 0.7848664298653603, 0.020754388300701976,
    0.41929547442123294, 0.5276111944112927, 0.009261432802304626,
    0.7873553985264152, 0.3426671407651156, 0.7667892382014543,
    0.5517849819734693, 0.7631283523514867, 0.6923608214128762,
    0.5662567117251456, 0.3462207866832614, 0.10014316765591502,
    0.7514964751899242, 0.10264921723864973, 0.857604740653187,
    0.9470854757819325, 0.2523416255135089, 0.1741226592566818,
    0.7293544022832066, 0.27104331250302494, 0.9514489776920527,
    0.8580713202245533, 0.6458012359216809, 0.9591378860641271,
    0.5609750000294298, 0.947548215277493, 0.560010762186721,
    0.09959355695173144, 0.7606127120088786, 0.5603374300990254,
    0.18158117425628006, 0.191679114010185, 0.3510516246315092,
    0.674994793953374, 0.14981508115306497, 0.04677553614601493,
    0.7849298871587962, 0.9908339392859489, 0.6457164818421006,
    0.6962521011009812, 0.5275130155496299, 0.4135431598406285,
    0.5523149855434895, 0.42347118840552866, 0.07354999240487814,
    0.049044564832001925, 0.16037910897284746, 0.05664900038391352,
    0.12027582083828747, 0.7054019554052502, 0.7814125623553991,
    0.24232683167792857, 0.21524034021422267, 0.8780211994890124,
    0.863309342879802, 0.9733160955365747, 0.41009553289040923,
    0.9412490997929126, 0.36368453479371965, 0.7501518023200333,
    0.36082399962469935, 0.2779751920606941, 0.43473220197483897,
    0.1221925055142492, 0.03584803454577923, 0.9913157301489264,
    0.08039642381481826, 0.05791334109380841, 0.17011404037475586,
    0.34446066757664084, 0.2170717241242528
  ];
  var idx = 0;
  return function() {
    idx++;
    if (idx >= _rand.length) {
      idx = 0;
    }
    return _rand[idx];
  };
})();

var PerfTest = c.inherit({

  grainedUniformRandom: function() {
    var grain = 1.0e-4;
    return ((random() / grain) * grain);
    // return ((0.5 / grain) * grain);
  },

  randomInRange: function(low /*int*/, high /*int*/) {
    return Math.floor((random() * (high - low + 1)) + low);
    // return Math.floor((0.5 * (high - low + 1)) + low);
  },

  addDelSolvers: function(nCns /*int*/,
                          nResolves /*int*/,
                          nSolvers /*int*/,
                          testNum /*int*/) {
    var totalTimer = new c.Timer();
    totalTimer.start();

    var timer = new c.Timer();
    var tmAddvar, tmEditvar, tmResolvevar, tmEndEdit;
    var tmAdd, tmEdit, tmResolve;
    var ineqProb = 0.12;
    var maxVars = 3;
    var nVars = nCns;
    console.log("starting timing test. nCns = " + nCns + ", nSolvers = " + nSolvers + ", nResolves = " + nResolves);
    timer.start();
    var rgsolvers = new Array(nSolvers+1);
    for (var is = 0; is < nSolvers + 1; ++is) {
      rgsolvers[is] = new c.SimplexSolver();
      rgsolvers[is].autoSolve = false;
    }
    var rgpclv = new Array(nVars+1);
    for (var i = 0; i < nVars + 1; ++i) {
      rgpclv[i] = new c.Variable({ name: i, prefix: "x" });
      for (var is = 0; is < nSolvers + 1; ++is) {
        rgsolvers[is].addStay(rgpclv[i]);
      }
    }
    var nCnsMade = nCns * 5;
    var rgpcns = new Array(nCnsMade); // ClConstraints
    var rgpcnsAdded = new Array(nCns); // ClConstraint
    var nvs = 0;
    var k;
    var j;
    var coeff;
    for (j = 0; j < nCnsMade; ++j) {
      nvs = this.randomInRange(1, maxVars);
      var expr = c.Expression.fromConstant(
                                    this.grainedUniformRandom() * 20.0 - 10.0);
      for (k = 0; k < nvs; k++) {
        coeff = this.grainedUniformRandom() * 10 - 5;
        var iclv = this.randomInRange(0, nVars);
        expr.addExpression(c.times(rgpclv[iclv], coeff));
      }
      if (Math.random() < ineqProb) {
        rgpcns[j] = new c.Inequality(expr);
      } else {
        rgpcns[j] = new c.Equation(expr);
      }
    }
    timer.stop();
    console.log("done building data structures");
    console.log("time = " + timer.elapsedTime());
    for (var is = 0; is < nSolvers; ++is) {
      var cCns = 0;
      var cExceptions = 0;
      var solver = rgsolvers[nSolvers];
      cExceptions = 0;
      for (j = 0; j < nCnsMade && cCns < nCns; j++) {
        try {
          if (null != rgpcns[j]) {
            solver.addConstraint(rgpcns[j]);
            ++cCns;
          }
        } catch (err /*ExCLRequiredFailure*/) {
          cExceptions++;
          rgpcns[j] = null;
        }
      }
    }
    timer.reset();
    timer.start();
    for (var is = 0; is < nSolvers; ++is) {
      var cCns = 0;
      var cExceptions = 0;
      var solver = rgsolvers[is];
      for (j = 0; j < nCnsMade && cCns < nCns; j++) {
        try {
          if (null != rgpcns[j]) {
            solver.addConstraint(rgpcns[j]);
            ++cCns;
          }
        } catch (err /*ExCLRequiredFailure*/) {
          cExceptions++;
          rgpcns[j] = null;
        }
      }
      console.log("done adding " + cCns + " constraints [" + j + " attempted, " + cExceptions + " exceptions]");
      solver.solve();
      console.log("time = " + timer.elapsedTime());
    }
    timer.stop();
    tmAdd = timer.elapsedTime();
    var e1Index = this.randomInRange(0, nVars);
    var e2Index = this.randomInRange(0, nVars);
    console.log("Editing vars with indices " + e1Index + ", " + e2Index);
    var edit1 = new c.EditConstraint(rgpclv[e1Index], c.Strength.strong);
    var edit2 = new c.EditConstraint(rgpclv[e2Index], c.Strength.strong);
    console.log("about to start resolves");
    timer.reset();
    timer.start();
    rgsolvers.forEach(function(solver) {
      solver.addEditConstraint(edit1).addEditConstraint(edit2);
    });
    timer.stop();
    tmEdit = timer.elapsedTime();
    timer.reset().start();
    rgsolvers.forEach(function(solver) {
      for (var m = 0; m < nResolves; m++) {
        solver.resolvePair(rgpclv[e1Index].value * 1.001,
                           rgpclv[e2Index].value * 1.001);
      }
    });
    timer.stop();
    tmResolve = timer.elapsedTime();
    console.log("done resolves -- now ending edits");
    timer.reset().start();
    for (var is = 0; is < nSolvers; ++is) {
      rgsolvers[is].removeConstraint(edit1).removeConstraint(edit2);
    }
    timer.stop();
    tmEndEdit = timer.elapsedTime();

    totalTimer.stop();
    console.log("total time = " + totalTimer.elapsedTime());

    var s = "\n  ";
    var mspersec = 1000;
    console.log(s +
          "number of constraints: \t\t" + nCns + s +
          "number of solvers: \t\t\t" + nSolvers + s +
          "numbers of resolves: \t\t\t" + nResolves + s +
          "tests: \t\t\t\t" + testNum + s +
          "time to add (ms): \t\t\t" + tmAdd * mspersec + s +
          "time to edit (ms): \t\t\t" + tmEdit * mspersec + s +
          "time to resolve (ms): \t\t" + tmResolve * mspersec + s +
          "time to edit (ms): \t\t\t" + tmEndEdit * mspersec + s +
          "add time per solver (ms): \t\t" + tmAdd / nCns / nSolvers * mspersec + s +
          "edit time per solver (ms): \t\t" + tmEdit / nSolvers / 2 * mspersec + s +
          "resolve time per resolve (ms): \t" + tmResolve / nResolves / nSolvers * mspersec + s +
          "time to end edits per solver (ms): \t" + tmEndEdit / nSolvers / 2 * mspersec);
    return true;
  },

  main: function(testNum, constraints, solvers, resolves) {
    var fResult;
    testNum  =        testNum || 1;
    constraints = constraints || 900;
    resolves =       resolves || 100;
    solvers  =        solvers || 10;
    this.addDelSolvers(constraints, resolves, solvers, testNum);
  },
});

(new PerfTest()).main(1, 1000, 1, 1000);
// (new PerfTest()).main(1, 500, 10, 500);

//clt.main(new Array());
})(this["c"]||module.parent.exports||{});
